{"version":3,"file":"beyond-odoo.mjs","sources":["../../../projects/odoo/src/lib/injectionToken.ts","../../../projects/odoo/src/lib/interceptor/targetUrlInterceptor.ts","../../../projects/odoo/src/lib/provider.ts","../../../projects/odoo/src/lib/services/connector/json.service.ts","../../../projects/odoo/src/lib/services/baseService.ts","../../../projects/odoo/src/lib/services/auth.service.ts","../../../projects/odoo/src/public-api.ts","../../../projects/odoo/src/beyond-odoo.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\r\n\r\nexport const ODOO_SERVER_CONFIG_KEY = new InjectionToken<IOdooServerConfig>('odoo-server-config');\r\nexport interface IOdooServerConfig {\r\n  proxyUrl: string;\r\n  db: string;\r\n  odooUrl: string;\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { ODOO_SERVER_CONFIG_KEY } from '../injectionToken';\r\n\r\n\r\n@Injectable()\r\nexport class TargetUrlInterceptor implements HttpInterceptor {\r\n\r\n  readonly server = inject(ODOO_SERVER_CONFIG_KEY);\r\n\r\n  constructor() {  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    return next.handle(req.clone({\r\n      headers: req.headers.set('target-url', this.server.odooUrl)\r\n    }));\r\n  }\r\n}\r\n","\r\nimport { Provider } from \"@angular/core\";\r\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\r\nimport { TargetUrlInterceptor } from \"./interceptor/targetUrlInterceptor\";\r\n\r\nexport const provideOdoo = (): Provider => [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TargetUrlInterceptor,\r\n      multi: true\r\n    },\r\n  ]\r\n","import { inject, Injectable } from '@angular/core';\r\nimport { BydPermissionsServices } from '@beyond/server';\r\nimport { BehaviorSubject, map, Subject, tap } from 'rxjs';\r\nimport { ODOO_SERVER_CONFIG_KEY } from '../../injectionToken';\r\nimport { BydNotificationService, ENotificationCode } from '@beyond/notification';\r\n\r\nexport interface OdooAuthenticateResponse {\r\n  uid: number;\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OdooJsonConnector {\r\n  readonly notificationService = inject(BydNotificationService);\r\n  readonly permissionsServices = inject(BydPermissionsServices);\r\n  readonly server = inject(ODOO_SERVER_CONFIG_KEY);\r\n\r\n  get uid() {\r\n    return this.permissionsServices.uid;\r\n  }\r\n  get pass() {\r\n    return this.permissionsServices.pass;\r\n  }\r\n\r\n  get url(): string {\r\n    return this.server.proxyUrl;\r\n  }\r\n  get db(): string {\r\n    return this.server.db;\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  public login$(user: string, password: string) {\r\n    console.info('Getting UID');\r\n    return this._connectWithCredentials$(user, password).pipe(\r\n      tap((result) => {\r\n        this.permissionsServices.set(result.uid, password);\r\n\r\n        this.permissionsServices.setAuthenticated(true);\r\n      }),\r\n      map((result) => result.uid),\r\n    );\r\n  }\r\n\r\n\r\n  // Connexion avec identifiants\r\n  private _connectWithCredentials$(user: string, password: string) {\r\n    const endpoint = `${this.url}/web/session/authenticate`;\r\n    const params = {\r\n      jsonrpc: '2.0',\r\n      method: 'call',\r\n      params: {\r\n        db: this.db,\r\n        login: user,\r\n        password: password,\r\n      },\r\n      id: new Date().getTime(),\r\n    };\r\n\r\n    return this._call$<OdooAuthenticateResponse>(endpoint, params);\r\n\r\n  }\r\n\r\n  public searchCount$(\r\n    model: string,\r\n    domain: any[],\r\n    opts: Record<string, any> = {}\r\n  ) {\r\n    console.info('Search & Count:', model);\r\n    return this._call_kw$<number>(model, 'search_count', [domain], opts);\r\n  }\r\n  public searchRead$<T>(\r\n    model: string,\r\n    domain: any[],\r\n    fields: Array<keyof T> = [],\r\n    opts: Record<string, any> = {}\r\n  ) {\r\n    console.info('Search & Read:', model);\r\n    return this._call_kw$<T[]>(model, 'search_read', [domain, fields], opts);\r\n  }\r\n\r\n  public create$(model: string, values: Record<string, any>) {\r\n    return this._call_kw$(model, 'create', [values]);\r\n  }\r\n\r\n  public write$<T>(model: string, id: number, values: Record<string, any>) {\r\n    return this._call_kw$<T>(model, 'write', [[id], values]);\r\n  }\r\n\r\n  public delete$(model: string, id: number) {\r\n    return this._call_kw$(model, 'unlink', [[id]]);\r\n  }\r\n\r\n  public action$(model: string, action: string, ids: number[]) {\r\n    return this._call_kw$(model, action, ids);\r\n  }\r\n\r\n  private _call_kw$<T>(model: string, method: string, args: any[], kwargs: Record<string, any> = {}) {\r\n    return this._callWithUid<T>(model, method, args, kwargs);\r\n  }\r\n\r\n  private _callWithUid<T>(\r\n    model: string,\r\n    method: string,\r\n    args: any[],\r\n    kwargs: Record<string, any> = {}\r\n  ) {\r\n    const endpoint = `${this.url}/jsonrpc`;\r\n    const params = {\r\n      jsonrpc: '2.0',\r\n      method: 'call',\r\n      params: {\r\n        service: 'object',\r\n        method: 'execute_kw',\r\n        args: [this.db, this.uid, this.pass, model, method, args, kwargs],\r\n      },\r\n      id: new Date().getTime(),\r\n    };\r\n\r\n    return this._call$<T>(endpoint, params);\r\n  }\r\n\r\n  private _call$<T>(endpoint: string, params: any) {\r\n    const subject$ = new Subject<T>();\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(params),\r\n    }).then((response) => {\r\n      this._extractResult<T>(response).then((result) => {\r\n        console.log('response, ', result);\r\n        subject$.next(result);\r\n        subject$.complete();\r\n        subject$.unsubscribe();\r\n      }).catch((error) => {\r\n        subject$.error(error);\r\n        subject$.complete();\r\n        subject$.unsubscribe();\r\n        this._handleErrorMessage(error);\r\n      })\r\n    });\r\n\r\n    return subject$;\r\n  }\r\n\r\n  private async _extractResult<T>(response: any) {\r\n    if (!response || !response.ok) {\r\n      throw new Error(response?.statusText || 'Connection Error');\r\n    }\r\n\r\n    const body = <{result: T}>await response.json();\r\n\r\n    return body.result;\r\n  }\r\n\r\n    private _handleErrorMessage(message: any) {\r\n      const formattedMessage = message\r\n        .toString()\r\n        .replace('Error: Invalid XML-RPC', '')\r\n        .replace('Error: XML-RPC fault:', '');\r\n      this.notificationService.addNotification(formattedMessage, ENotificationCode.error);\r\n    }\r\n\r\n  /**\r\n   *\r\n   * out\r\n   */\r\n\r\n\r\n  // // Méthodes pratiques pour les opérations CRUD\r\n\r\n\r\n  // async read(model: string, id: number | number[], fields: string[] = []): Promise<any> {\r\n  //   return this.call_kw(model, 'read', [id, fields]);\r\n  // }\r\n\r\n  // async search(model: string, domain: any[]): Promise<number[]> {\r\n  //   return (await this.call_kw(model, 'search', [domain])) || [];\r\n  // }\r\n\r\n\r\n  // async disconnect(): Promise<boolean> {\r\n  //   if (!this.is_connected) {\r\n  //     return true;\r\n  //   }\r\n\r\n  //   const endpoint = `${this.url}/web/session/destroy`;\r\n  //   const params = {\r\n  //     jsonrpc: '2.0',\r\n  //     method: 'call',\r\n  //     params: {},\r\n  //     id: new Date().getTime(),\r\n  //   };\r\n\r\n  //   const headers: Record<string, string> = {\r\n  //     'Content-Type': 'application/json',\r\n  //   };\r\n\r\n  //   const response = await fetch(endpoint, {\r\n  //       method: 'POST',\r\n  //       headers,\r\n  //       body: JSON.stringify(params),\r\n  //     });\r\n\r\n  //   const body = await response.json();\r\n\r\n  //   this.is_connected = false;\r\n  //   this.auth_response = null;\r\n  //   this.permissionsServices.reset();\r\n  //   this.connectionState.next(false);\r\n  //   return true;\r\n  // }\r\n}\r\n","import { Injectable, inject } from '@angular/core';\r\n\r\nimport { getFirstString } from '@beyond/utils';\r\nimport { OdooJsonConnector } from './connector/json.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport abstract class BydBaseOdooService {\r\n  public _odooService = inject(OdooJsonConnector);\r\n\r\n  constructor() {\r\n  }\r\n\r\n  protected _handleJoinData<T>(\r\n    entity: T,\r\n    props: Array<{\r\n      from?: keyof T;\r\n      to: keyof T;\r\n    }>\r\n  ): T {\r\n    return props.reduce<T>((entityFilled, prop) => {\r\n      const linkProp = prop.from ? prop.from : prop.to.toString() + '_id';\r\n      const list = (<any>entity)[linkProp] || [];\r\n      entityFilled[prop.to] = <any>getFirstString(list);\r\n\r\n      return entityFilled;\r\n    }, entity);\r\n  }\r\n}\r\n","import { inject, Injectable } from '@angular/core';\n\nimport { BydPermissionsServices } from '@beyond/server';\nimport { BydBaseOdooService } from './baseService';\n\n\ninterface UserProfile {\n\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BydAuthOdooService extends BydBaseOdooService {\n  readonly permissionsServices = inject(BydPermissionsServices);\n  constructor() {\n    super();\n  }\n\n  public login$(data: { identifier: string, password: string}) {\n    return this._odooService.login$(data.identifier, data.password);\n  }\n\n  public logout() {\n    this.permissionsServices.reset();\n    location.reload();\n  }\n\n}\n","/*\r\n * Public API Surface of odoo\r\n */\r\n\r\nexport * from './lib/provider';\r\n\r\nexport * from './lib/injectionToken';\r\nexport * from './lib/interceptor/targetUrlInterceptor';\r\n\r\n\r\nexport * from './lib/services/baseService';\r\nexport * from './lib/services/auth.service';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}