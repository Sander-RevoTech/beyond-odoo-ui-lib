{"version":3,"file":"beyond-notification.mjs","sources":["../../../projects/notification/src/lib/enum.ts","../../../projects/notification/src/lib/components/popup/inline/notification-inline.component.ts","../../../projects/notification/src/lib/components/popup/inline/notification-inline.component.html","../../../projects/notification/src/lib/services/notification.service.ts","../../../projects/notification/src/lib/components/popup/box/notification-box.component.ts","../../../projects/notification/src/lib/components/popup/box/notification-box.component.html","../../../projects/notification/src/public-api.ts","../../../projects/notification/src/beyond-notification.ts"],"sourcesContent":["export enum ENotificationCode {\n  none,\n  error,\n  warning,\n  information,\n  success,\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { BydBaseComponent, TranslatePipe } from '@beyond/utils';\n\nimport { ENotificationCode } from '../../../enum';\nimport { NgClass, NgIf, NgSwitch, NgSwitchCase } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\n\n@Component({\n  selector: 'byd-notification-inline',\n  templateUrl: './notification-inline.component.html',\n  styleUrls: ['./notification-inline.component.scss'],\n  standalone: true,\n  imports: [TranslatePipe, NgSwitch, NgSwitchCase, NgClass, NgIf, MatIcon],\n})\nexport class NotificationInlineComponent extends BydBaseComponent {\n  @Input() set message(value: string) {\n    this._message = value;\n    this.showMessage = !!value;\n  }\n\n  @Input()\n  code: ENotificationCode = ENotificationCode.information;\n\n  @Input()\n  showClose = true;\n\n  @Output()\n  askClose: EventEmitter<null> = new EventEmitter();\n\n  public showMessage = false;\n\n  get message(): string {\n    return this._message;\n  }\n  get isError(): boolean {\n    return this.code === ENotificationCode.error;\n  }\n  get isWarning(): boolean {\n    return this.code === ENotificationCode.warning;\n  }\n  get isInformation(): boolean {\n    return this.code === ENotificationCode.information;\n  }\n  get isSuccess(): boolean {\n    return this.code === ENotificationCode.success;\n  }\n\n  private _message!: string;\n\n  constructor() {\n    super();\n  }\n\n  public close = () => {\n    this.askClose.emit();\n  };\n\n  public getIcon(): string {\n    if (this.isError) {\n      return 'close-tool';\n    }\n    if (this.isWarning) {\n      return 'warning';\n    }\n    if (this.isSuccess) {\n      return 'checked';\n    }\n    return 'help';\n  }\n  public getTypeClass(): string {\n    if (this.isError) {\n      return 'danger';\n    } else if (this.isWarning) {\n      return 'warning';\n    } else if (this.isInformation) {\n      return 'info';\n    } else if (this.isSuccess) {\n      return 'success';\n    } else {\n      return '';\n    }\n  }\n}\n","<ng-container *ngIf=\"this.showMessage\">\n  <div class=\"notification-container\">\n    <div class=\"text\">\n      <div class=\"label\" [ngClass]=\"this.getTypeClass()\">\n        <mat-icon class=\"mr-space-xs\">{{ this.getIcon() }}</mat-icon>\n        <ng-container [ngSwitch]=\"true\" *ngIf=\"!this.message\">\n          <ng-container *ngSwitchCase=\"this.isError\">\n            {{ \"notification.inline.label.error\" | translate }}\n          </ng-container>\n          <ng-container *ngSwitchCase=\"this.isWarning\">\n            {{ \"notification.inline.label.warning\" | translate }}\n          </ng-container>\n          <ng-container *ngSwitchCase=\"this.isInformation\">\n            {{ \"notification.inline.label.info\" | translate }}\n          </ng-container>\n          <ng-container *ngSwitchCase=\"this.isSuccess\">\n            {{ \"notification.inline.label.success\" | translate }}\n          </ng-container>\n        </ng-container>\n        <ng-container [ngSwitch]=\"true\" *ngIf=\"this.message\">\n          {{ this.message | translate }}\n        </ng-container>\n      </div>\n    </div>\n    <span class=\"close\" (click)=\"this.close()\" *ngIf=\"this.showClose\">\n      <mat-icon>close</mat-icon>\n    </span>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"!this.showMessage\">\n  <ng-content></ng-content>\n</ng-container>\n","import { Injectable, InjectionToken } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { ENotificationCode } from '../enum';\n\n// export const LAZY_SERVICE_TOKEN = new InjectionToken<TaNotificationService>('TaNotificationService');\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BydNotificationService {\n  public id = Math.random();\n\n  public newNotification$ = new Subject<{\n    message: string;\n    code: ENotificationCode;\n  }>();\n\n  constructor() {}\n\n  public addNotification(message: string, code: ENotificationCode) {\n    this.newNotification$.next({ message, code });\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { tap } from 'rxjs/operators';\n\nimport { BydBaseComponent } from '@beyond/utils';\n\nimport { ENotificationCode } from '../../../enum';\nimport { BydNotificationService } from '../../../services/notification.service';\nimport { NotificationInlineComponent } from \"../inline/notification-inline.component\";\nimport { NgFor } from '@angular/common';\nimport { EToast, ToastComponent } from '@beyond/ui';\n\n@Component({\n  selector: 'byd-notification-box',\n  templateUrl: './notification-box.component.html',\n  styleUrls: ['./notification-box.component.scss'],\n  standalone: true,\n  imports: [NotificationInlineComponent, NgFor, ToastComponent],\n})\nexport class NotificationBoxComponent extends BydBaseComponent {\n  public list: { message: string; code: ENotificationCode }[] = [];\n\n  constructor(private _notificationService: BydNotificationService) {\n    super();\n\n    this._registerSubscription(\n      this._notificationService.newNotification$\n        .pipe(\n          tap(notification => {\n            this.list.push(notification);\n          }),\n          tap(notification => {\n            setTimeout(() => {\n              this.list = this.list.filter(item => item !== notification);\n            }, 3000);\n          })\n        )\n        .subscribe()\n    );\n  }\n\n  public getCode(code: ENotificationCode): EToast {\n    return code as unknown as EToast;\n  }\n}\n","<div class=\"notification-box_container flex-column g-space-sm\">\n  <div *ngFor=\"let item of this.list\">\n    <byd-toast [code]=\"this.getCode(item.code)\">\n      <byd-notification-inline\n        [message]=\"item.message\"\n        [code]=\"item.code\"\n        [showClose]=\"false\"\n      ></byd-notification-inline>\n    </byd-toast>\n  </div>\n</div>\n","/*\n * Public API Surface of notification\n */\n\nexport * from './lib/components/public-api';\n\nexport * from './lib/enum';\n\nexport * from './lib/services/notification.service';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.BydNotificationService"],"mappings":"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"}