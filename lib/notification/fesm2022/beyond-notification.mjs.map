{"version":3,"file":"beyond-notification.mjs","sources":["../../../projects/notification/src/lib/enum.ts","../../../projects/notification/src/lib/services/notification.service.ts","../../../projects/notification/src/lib/components/popup/error/error.component.ts","../../../projects/notification/src/lib/components/popup/error/error.component.html","../../../projects/notification/src/lib/components/popup/inline/notification-inline.component.ts","../../../projects/notification/src/lib/components/popup/inline/notification-inline.component.html","../../../projects/notification/src/lib/components/popup/box/notification-box.component.ts","../../../projects/notification/src/lib/components/popup/box/notification-box.component.html","../../../projects/notification/src/lib/services/pwa.service.ts","../../../projects/notification/src/lib/components/pwa/pwa.component.ts","../../../projects/notification/src/lib/components/pwa/pwa.component.html","../../../projects/notification/src/lib/components/global-loading/global-loading.component.ts","../../../projects/notification/src/lib/components/global-loading/global-loading.component.html","../../../projects/notification/src/public-api.ts","../../../projects/notification/src/beyond-notification.ts"],"sourcesContent":["export enum ENotificationCode {\r\n  none,\r\n  error,\r\n  warning,\r\n  information,\r\n  success,\r\n}\r\n","import { Injectable, InjectionToken, signal } from '@angular/core';\r\n\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { ENotificationCode } from '../enum';\r\n\r\n// export const LAZY_SERVICE_TOKEN = new InjectionToken<TaNotificationService>('TaNotificationService');\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BydNotificationService {\r\n  public id = Math.random();\r\n\r\n  readonly pendingBlockedRequest = signal<number>(0);\r\n\r\n  public newNotification$ = new Subject<{\r\n    message: string;\r\n    code: ENotificationCode;\r\n  }>();\r\n\r\n  public errorNotification$ = new Subject<{\r\n    message: string;\r\n  }>();\r\n\r\n  public userNotification$ = new Subject<{\r\n    message: string;\r\n  }>();\r\n\r\n  constructor() {}\r\n\r\n  public incPendingBlockedRequest() {\r\n    this.pendingBlockedRequest.set(this.pendingBlockedRequest() + 1);\r\n  }\r\n  public decPendingBlockedRequest() {\r\n    this.pendingBlockedRequest.set(this.pendingBlockedRequest() - 1);\r\n  }\r\n  public addNotification(message: string, code: ENotificationCode) {\r\n    this.newNotification$.next({ message, code });\r\n  }\r\n\r\n  public addErrorNotification(message: string) {\r\n    this.errorNotification$.next({ message });\r\n  }\r\n\r\n  public addUserNotification(message: string) {\r\n    this.userNotification$.next({ message });\r\n  }\r\n}\r\n","import { Component, Inject, inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\nimport { TranslatePipe } from '@beyond/translation';\r\nimport { BydButtonComponent, BydTitleComponent } from '@beyond/ui';\r\nimport { BydBaseComponent } from '@beyond/utils';\r\n\r\nimport { ENotificationCode } from '../../../enum';\r\nimport { BydNotificationService } from '../../../services/notification.service';\r\n\r\nexport interface ErrorParams {\r\n  message: string;\r\n  type: 'user' | 'error';\r\n}\r\n@Component({\r\n  selector: '',\r\n  templateUrl: './error.component.html',\r\n  styleUrls: ['./error.component.scss'],\r\n  standalone: true,\r\n  imports: [BydTitleComponent, BydButtonComponent, TranslatePipe],\r\n})\r\nexport class ErrorDialog extends BydBaseComponent {\r\n  private readonly _notificationService = inject(BydNotificationService);\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ErrorDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data?: ErrorParams\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public copyContent = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(this.data?.message ?? '');\r\n      this._notificationService.addNotification('Content copied to clipboard', ENotificationCode.success);\r\n    } catch (err) {\r\n      this._notificationService.addNotification('Failed to copy', ENotificationCode.error);\r\n    }\r\n  };\r\n}\r\n","<div class=\"container p-space-xl\">\r\n  <byd-title>{{ 'core.notification.error.title' | translate }}</byd-title>\r\n  <p>\r\n    {{ this.data?.message }}\r\n  </p>\r\n  <div class=\"grid mb-space-10\">\r\n    <byd-button (action)=\"this.copyContent()\">\r\n      {{ 'core.notification.error.copy' | translate }}\r\n    </byd-button>\r\n    <byd-button (action)=\"this.close()\">\r\n      {{ 'core.notification.error.close' | translate }}\r\n    </byd-button>\r\n  </div>\r\n</div>\r\n","import { NgClass, NgIf, NgSwitch, NgSwitchCase } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\nimport { TranslatePipe } from '@beyond/translation';\r\nimport { BydBaseComponent } from '@beyond/utils';\r\n\r\nimport { ENotificationCode } from '../../../enum';\r\n\r\n@Component({\r\n  selector: 'byd-notification-inline',\r\n  templateUrl: './notification-inline.component.html',\r\n  styleUrls: ['./notification-inline.component.scss'],\r\n  standalone: true,\r\n  imports: [TranslatePipe, NgSwitch, NgSwitchCase, NgClass, NgIf, MatIcon],\r\n})\r\nexport class NotificationInlineComponent extends BydBaseComponent {\r\n  @Input() set message(value: string) {\r\n    this._message = value;\r\n    this.showMessage = !!value;\r\n  }\r\n\r\n  @Input()\r\n  code: ENotificationCode = ENotificationCode.information;\r\n\r\n  @Input()\r\n  showClose = true;\r\n\r\n  @Output()\r\n  askClose: EventEmitter<null> = new EventEmitter();\r\n\r\n  public showMessage = false;\r\n\r\n  get message(): string {\r\n    return this._message;\r\n  }\r\n  get isError(): boolean {\r\n    return this.code === ENotificationCode.error;\r\n  }\r\n  get isWarning(): boolean {\r\n    return this.code === ENotificationCode.warning;\r\n  }\r\n  get isInformation(): boolean {\r\n    return this.code === ENotificationCode.information;\r\n  }\r\n  get isSuccess(): boolean {\r\n    return this.code === ENotificationCode.success;\r\n  }\r\n\r\n  private _message!: string;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public close = () => {\r\n    this.askClose.emit();\r\n  };\r\n\r\n  public getIcon(): string {\r\n    if (this.isError) {\r\n      return 'close-tool';\r\n    }\r\n    if (this.isWarning) {\r\n      return 'warning';\r\n    }\r\n    if (this.isSuccess) {\r\n      return 'checked';\r\n    }\r\n    return 'help';\r\n  }\r\n  public getTypeClass(): string {\r\n    if (this.isError) {\r\n      return 'danger';\r\n    } else if (this.isWarning) {\r\n      return 'warning';\r\n    } else if (this.isInformation) {\r\n      return 'info';\r\n    } else if (this.isSuccess) {\r\n      return 'success';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n","<ng-container *ngIf=\"this.showMessage\">\r\n  <div class=\"notification-container\">\r\n    <div class=\"text\">\r\n      <div class=\"label\" [ngClass]=\"this.getTypeClass()\">\r\n        <mat-icon class=\"mr-space-xs\">{{ this.getIcon() }}</mat-icon>\r\n        <ng-container [ngSwitch]=\"true\" *ngIf=\"!this.message\">\r\n          <ng-container *ngSwitchCase=\"this.isError\">\r\n            {{ 'notification.inline.label.error' | translate }}\r\n          </ng-container>\r\n          <ng-container *ngSwitchCase=\"this.isWarning\">\r\n            {{ 'notification.inline.label.warning' | translate }}\r\n          </ng-container>\r\n          <ng-container *ngSwitchCase=\"this.isInformation\">\r\n            {{ 'notification.inline.label.info' | translate }}\r\n          </ng-container>\r\n          <ng-container *ngSwitchCase=\"this.isSuccess\">\r\n            {{ 'notification.inline.label.success' | translate }}\r\n          </ng-container>\r\n        </ng-container>\r\n        <ng-container [ngSwitch]=\"true\" *ngIf=\"this.message\">\r\n          {{ this.message | translate }}\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n    <span class=\"close\" (click)=\"this.close()\" *ngIf=\"this.showClose\">\r\n      <mat-icon>close</mat-icon>\r\n    </span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"!this.showMessage\">\r\n  <ng-content></ng-content>\r\n</ng-container>\r\n","import { NgFor } from '@angular/common';\r\nimport { Component, inject, signal } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { EToast, ToastComponent } from '@beyond/ui';\r\nimport { BydBaseComponent } from '@beyond/utils';\r\n\r\nimport { ENotificationCode } from '../../../enum';\r\nimport { BydNotificationService } from '../../../services/notification.service';\r\nimport { ErrorDialog, ErrorParams } from '../error/error.component';\r\nimport { NotificationInlineComponent } from '../inline/notification-inline.component';\r\n\r\n@Component({\r\n  selector: 'byd-notification-box',\r\n  templateUrl: './notification-box.component.html',\r\n  styleUrls: ['./notification-box.component.scss'],\r\n  standalone: true,\r\n  imports: [NotificationInlineComponent, NgFor, ToastComponent, MatIcon],\r\n})\r\nexport class NotificationBoxComponent extends BydBaseComponent {\r\n  private readonly _notificationService = inject(BydNotificationService);\r\n\r\n  public list: { message: string; code: ENotificationCode }[] = [];\r\n\r\n  public userNotif = signal<{ message: string; code: ENotificationCode } | null>(null);\r\n\r\n  constructor(private _dialog: MatDialog) {\r\n    super();\r\n\r\n    this._registerSubscription(\r\n      this._notificationService.newNotification$\r\n        .pipe(\r\n          tap(notification => {\r\n            this.list.push(notification);\r\n          }),\r\n          tap(notification => {\r\n            setTimeout(() => {\r\n              this.list = this.list.filter(item => item !== notification);\r\n            }, 3000);\r\n          })\r\n        )\r\n        .subscribe()\r\n    );\r\n\r\n    this._registerSubscription(\r\n      this._notificationService.errorNotification$\r\n        .pipe(\r\n          tap(notification => {\r\n            this._dialog.open<ErrorDialog, ErrorParams>(ErrorDialog, {\r\n              data: { message: notification.message, type: 'error' },\r\n            });\r\n          })\r\n        )\r\n        .subscribe()\r\n    );\r\n\r\n    this._registerSubscription(\r\n      this._notificationService.userNotification$\r\n        .pipe(\r\n          tap(notification => {\r\n            this.userNotif.set({ message: notification.message, code: ENotificationCode.error });\r\n          })\r\n        )\r\n        .subscribe()\r\n    );\r\n  }\r\n\r\n  public getCode(code: ENotificationCode): EToast {\r\n    return code as unknown as EToast;\r\n  }\r\n}\r\n","<div class=\"notification-box_container flex-column g-space-sm\">\r\n  <div *ngFor=\"let item of this.list\">\r\n    <byd-toast [code]=\"this.getCode(item.code)\">\r\n      <byd-notification-inline\r\n        [message]=\"item.message\"\r\n        [code]=\"item.code\"\r\n        [showClose]=\"false\"\r\n      ></byd-notification-inline>\r\n    </byd-toast>\r\n  </div>\r\n  @let userNotif = this.userNotif();\r\n  @if (userNotif) {\r\n    <byd-toast [code]=\"this.getCode(userNotif.code)\" [onTop]=\"true\">\r\n      <div class=\"space-between\">\r\n        {{ userNotif.message }}\r\n        <mat-icon (click)=\"this.userNotif.set(null)\">close</mat-icon>\r\n      </div>\r\n    </byd-toast>\r\n  }\r\n</div>\r\n","import { Inject, Injectable } from '@angular/core';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface IPwaConfig {\r\n  active: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BydPwaService {\r\n  public isPWaCapability$ = new BehaviorSubject<boolean>(false);\r\n\r\n  private _promptEvent!: any;\r\n\r\n  constructor() {\r\n    window.addEventListener('beforeinstallprompt', event => {\r\n      this._promptEvent = event;\r\n      this.isPWaCapability$.next(true);\r\n    });\r\n  }\r\n\r\n  public isPWaCapability() {\r\n    return !!this._promptEvent;\r\n  }\r\n  public launchInstall(): void {\r\n    if (this._promptEvent) {\r\n      this._promptEvent.prompt();\r\n    }\r\n  }\r\n}\r\n","import { Component, inject } from '@angular/core';\r\n\r\nimport { TranslatePipe } from '@beyond/translation';\r\nimport { BydButtonComponent, BydLinkComponent, BydTitleComponent, LogoComponent } from '@beyond/ui';\r\nimport { BydBaseComponent } from '@beyond/utils';\r\n\r\nimport { BydPwaService } from '../../services/pwa.service';\r\n\r\n@Component({\r\n  selector: 'app-pwa',\r\n  templateUrl: './pwa.component.html',\r\n  styleUrls: ['./pwa.component.scss'],\r\n  imports: [BydTitleComponent, BydButtonComponent, TranslatePipe, BydLinkComponent, LogoComponent],\r\n})\r\nexport class PwaComponent extends BydBaseComponent {\r\n  public show = false;\r\n\r\n  private _pwa = inject(BydPwaService);\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this._registerSubscription(this._pwa.isPWaCapability$.subscribe(is => (this.show = is)));\r\n  }\r\n\r\n  install() {\r\n    this._pwa.launchInstall();\r\n  }\r\n\r\n  snooze() {\r\n    this.close();\r\n  }\r\n\r\n  public close() {\r\n    this.show = false;\r\n  }\r\n}\r\n","@if (this.show) {\r\n  <div class=\"installer-container grid align-items-center\">\r\n    <div class=\"g-col-9 ta-c\">\r\n      <div>\r\n        <byd-logo></byd-logo>\r\n      </div>\r\n      <byd-title [level]=\"2\" class=\"mt-space-sm\">{{ 'core.pwa.title' | translate }} </byd-title>\r\n    </div>\r\n\r\n    <div class=\"g-col-3\">\r\n      <div class=\"ta-c\">\r\n        <div>\r\n          <byd-button [type]=\"'secondary'\" (action)=\"this.install()\"> {{ 'core.pwa.install' | translate }} </byd-button>\r\n        </div>\r\n        <div class=\"mt-space-sm\">\r\n          <byd-link (click)=\"this.snooze()\">\r\n            {{ 'core.pwa.cancel' | translate }}\r\n          </byd-link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n","import { Component, inject } from '@angular/core';\r\n\r\nimport { LoaderComponent, LogoComponent } from '@beyond/ui';\r\n\r\nimport { BydNotificationService } from '../../services/notification.service';\r\n\r\n@Component({\r\n  selector: 'byd-global-loading',\r\n  imports: [LogoComponent, LoaderComponent],\r\n  templateUrl: './global-loading.component.html',\r\n  styleUrl: './global-loading.component.scss',\r\n})\r\nexport class BydGlobalLoadingComponent {\r\n  public notificationService = inject(BydNotificationService);\r\n}\r\n","@if (this.notificationService.pendingBlockedRequest() > 0) {\r\n  <div class=\"global-loading-container\">\r\n    <byd-logo></byd-logo>\r\n    <byd-loader [isLoading]=\"true\"></byd-loader>\r\n  </div>\r\n}\r\n","/*\r\n * Public API Surface of notification\r\n */\r\n\r\nexport * from './lib/components/public-api';\r\n\r\nexport * from './lib/enum';\r\n\r\nexport * from './lib/services/notification.service';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}