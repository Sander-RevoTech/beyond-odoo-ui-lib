{"version":3,"file":"beyond-form-model.mjs","sources":["../../../../projects/form/form-model/src/lib/validators/slug.validator.ts","../../../../projects/form/form-model/src/lib/models/input/base.ts","../../../../projects/form/form-model/src/lib/models/input/checkbox.ts","../../../../projects/form/form-model/src/lib/models/input/textbox.ts","../../../../projects/form/form-model/src/lib/models/input/colorPicker.ts","../../../../projects/form/form-model/src/lib/models/input/dropdown.ts","../../../../projects/form/form-model/src/lib/models/input/label.ts","../../../../projects/form/form-model/src/lib/models/input/number.ts","../../../../projects/form/form-model/src/lib/models/input/panel.ts","../../../../projects/form/form-model/src/lib/models/input/radio.ts","../../../../projects/form/form-model/src/lib/models/input/textarea.ts","../../../../projects/form/form-model/src/lib/models/input/upload.ts","../../../../projects/form/form-model/src/lib/models/factory.ts","../../../../projects/form/form-model/src/lib/models/input/choices.ts","../../../../projects/form/form-model/src/lib/models/input/datePicker.ts","../../../../projects/form/form-model/src/lib/models/input/dynamic.ts","../../../../projects/form/form-model/src/lib/models/input/email.ts","../../../../projects/form/form-model/src/lib/models/input/password.ts","../../../../projects/form/form-model/src/lib/models/input/phone.ts","../../../../projects/form/form-model/src/lib/models/input/slider.ts","../../../../projects/form/form-model/src/lib/models/input/switch.ts","../../../../projects/form/form-model/src/lib/models/input/timePicker.ts","../../../../projects/form/form-model/src/lib/models/input/address.ts","../../../../projects/form/form-model/src/lib/models/input/extra/button.ts","../../../../projects/form/form-model/src/public-api.ts","../../../../projects/form/form-model/src/beyond-form-model.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\n\r\nexport function slugValidator(): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const value = control.value as string;\r\n\r\n    // Vérifier si la valeur respecte les caractéristiques d'un slug\r\n    const isValidSlug = /^[a-z0-9]+(?:-[a-z0-9]+)*$/.test(value);\r\n\r\n    return isValidSlug ? null : { invalidSlug: true };\r\n  };\r\n}\r\n","import { AbstractControl, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\n\r\n// import { ENotificationCode } from '@beyond/notification';\r\nimport { SubscriberHandler } from '@beyond/utils';\r\nimport { Observable, Subject, Subscription, distinctUntilChanged, of } from 'rxjs';\r\n\r\nimport { InputLabel } from './label';\r\n\r\nexport interface IInputsError {\r\n  status: any;\r\n  message: string;\r\n}\r\n\r\nexport interface IInputBase<T> {\r\n  value$?: Observable<T>;\r\n  value?: T;\r\n  key?: string;\r\n  label?: string;\r\n  type?: string;\r\n  message?: string;\r\n  controlType?: string;\r\n  validators?: ValidatorFn[];\r\n  class?: string;\r\n  children?: (InputBase<any> | InputLabel)[];\r\n  disabled?: boolean;\r\n  readonly?: boolean;\r\n  visible$?: Observable<boolean>;\r\n  bindStatusToVisible?: boolean;\r\n}\r\n\r\nexport class InputBase<T> implements IInputBase<T> {\r\n  key: string;\r\n  label: string;\r\n  type: string;\r\n  message: string;\r\n  controlType: string;\r\n  validators: ValidatorFn[];\r\n  formControl?: AbstractControl;\r\n  class: string;\r\n  children: (InputBase<any> | InputLabel)[];\r\n  disabled: boolean;\r\n  readonly: boolean;\r\n  visible$: Observable<boolean>;\r\n  changeValue$ = new Subject<T>();\r\n\r\n  private _value: T;\r\n  private _isVisible!: boolean;\r\n\r\n  protected _subscriberHandler = new SubscriberHandler();\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set value(value: T) {\r\n    this._value = value;\r\n    this.formControl?.setValue(value);\r\n  }\r\n  constructor(options: IInputBase<any> = {}) {\r\n    if (options.value$) {\r\n      this._subscriberHandler.registerSubscription(\r\n        options.value$.subscribe({\r\n          next: value => {\r\n            if (this.value) {\r\n              return;\r\n            }\r\n            this.value = value;\r\n          },\r\n        })\r\n      );\r\n    }\r\n\r\n    this._value = options.value === undefined ? null : options.value;\r\n    this.key = options.key || Math.random().toString();\r\n    this.label = options.label || '';\r\n    this.type = options.type || '';\r\n    this.message = options.message || '';\r\n    this.controlType = options.controlType || '';\r\n    this.validators = options.validators || [];\r\n    this.class = options.class || 'g-col-12';\r\n    this.children = [];\r\n    this.disabled = options.disabled === true;\r\n    this.readonly = options.readonly === true;\r\n\r\n    this.visible$ = options.visible$ || of(true);\r\n\r\n    if (options.bindStatusToVisible !== false) {\r\n      this._subscriberHandler.registerSubscription(\r\n        this.visible$.subscribe(visible => {\r\n          this._isVisible = visible;\r\n\r\n          if (options.bindStatusToVisible !== false) {\r\n            if (!visible) {\r\n              this.disable();\r\n            } else {\r\n              this.enable();\r\n            }\r\n          }\r\n\r\n          if (!visible) {\r\n            this.formControl?.setValue(null);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  public createFormControl(group?: FormGroup) {\r\n    if (this.children.length > 0) {\r\n      for (const child of this.children) {\r\n        if (child instanceof InputBase) {\r\n          child.createFormControl(group);\r\n        }\r\n      }\r\n    } else {\r\n      this.formControl = new FormControl<T>(this.value, this.validators);\r\n      if (this.disabled) {\r\n        this.formControl.disable();\r\n      }\r\n      this._subscriberHandler.registerSubscription(\r\n        this.formControl.valueChanges.pipe(distinctUntilChanged()).subscribe(value => {\r\n          this.value = value;\r\n          this.launchChangeValue();\r\n        })\r\n      );\r\n      if (group) {\r\n        group.addControl(this.key, this.formControl);\r\n      }\r\n    }\r\n  }\r\n\r\n  public launchChangeValue() {\r\n    this.changeValue$.next(this.value);\r\n    this.formControl?.updateValueAndValidity();\r\n    this.children.forEach(child => child.launchChangeValue());\r\n  }\r\n\r\n  public disable() {\r\n    this.formControl?.disable();\r\n    this.children.forEach(child => child.disable());\r\n  }\r\n\r\n  public enable() {\r\n    if (!this._isVisible) return;\r\n    this.formControl?.enable();\r\n    this.children.forEach(child => child.enable());\r\n  }\r\n\r\n  public destroy() {\r\n    this.changeValue$.complete();\r\n    this._subscriberHandler.destroy();\r\n  }\r\n}\r\n","import { IInputBase, InputBase } from './base';\r\n\r\nexport interface IInputCheckBox extends IInputBase<boolean> {\r\n  toggle?: boolean;\r\n}\r\n\r\nexport class InputCheckBox extends InputBase<boolean> {\r\n  override controlType = 'checkbox';\r\n\r\n  constructor(options: IInputCheckBox = {}) {\r\n    super(options);\r\n\r\n    if (options.toggle === true) {\r\n      this.controlType = 'toggle';\r\n    }\r\n\r\n    if (!this.value) {\r\n      this.value = false;\r\n    }\r\n  }\r\n}\r\n","import { IInputBase, InputBase } from './base';\r\n\r\nexport interface IInputTextBox<T> extends IInputBase<T> {\r\n  type?: string;\r\n  icon?: string;\r\n  iconClicked?: () => void;\r\n}\r\n\r\nexport class InputTextBox<T = string> extends InputBase<T> {\r\n  override controlType = 'textbox';\r\n  icon?: string | null;\r\n  iconClicked?: () => void;\r\n\r\n  constructor(options: IInputTextBox<string> = {}) {\r\n    super(options);\r\n    this.type = options.type || 'text';\r\n    this.icon = options.icon || null;\r\n    this.iconClicked = options.iconClicked;\r\n  }\r\n}\r\n","import { IInputTextBox, InputTextBox } from './textbox';\r\n\r\nexport class InputColorPicker extends InputTextBox {\r\n  constructor(options: IInputTextBox<string> = {}) {\r\n    super(options);\r\n    this.controlType = 'colorPicker';\r\n  }\r\n}\r\n","import { Observable, Subject, of } from 'rxjs';\r\n\r\nimport { IInputBase, InputBase } from './base';\r\n\r\nexport interface IInputDropdown<T> extends IInputBase<T> {\r\n  options?: Observable<{ id: string; name: string }[]>;\r\n  multiple?: boolean;\r\n  showNothingOption?: boolean;\r\n  withSearch?: boolean;\r\n  width?: string;\r\n  valueChanged?: (data?: string) => void;\r\n}\r\nexport class InputDropdown<T = string | string[]> extends InputBase<T> {\r\n  override controlType = 'dropdown';\r\n  options: Observable<{ id: string; name: string; disabled?: boolean }[]>;\r\n  multiple: boolean;\r\n  showNothingOption: boolean = false;\r\n  withSearch: boolean = false;\r\n  width?: string;\r\n\r\n  searchChangeValue$ = new Subject<string>();\r\n\r\n  constructor(options: IInputDropdown<T> = {}) {\r\n    super(options);\r\n    this.options = options['options'] || of([]);\r\n    this.multiple = options['multiple'] || false;\r\n    this.showNothingOption = !this.multiple ? !!options.showNothingOption : false;\r\n    this.width = options.width || '100%';\r\n    this.withSearch = options.withSearch || false;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { IInputBase, InputBase } from './base';\r\n\r\nexport interface IInputLabel extends IInputBase<unknown> {\r\n  extraInfo?: Observable<string>;\r\n}\r\nexport class InputLabel extends InputBase<unknown> implements IInputLabel {\r\n  extraInfo: Observable<string>;\r\n  constructor(options: IInputLabel = {}) {\r\n    super(options);\r\n\r\n    this.extraInfo = options.extraInfo ? options.extraInfo : of('');\r\n    this.controlType = 'label';\r\n  }\r\n}\r\n","import { IInputTextBox, InputTextBox } from './textbox';\r\n\r\nexport class InputNumber extends InputTextBox<number> {\r\n  constructor(options: IInputTextBox<string> = {}) {\r\n    super(options);\r\n    this.type = 'number';\r\n  }\r\n}\r\n","import { IInputBase, InputBase } from './base';\r\nimport { InputLabel } from './label';\r\n\r\ntype classAvailable = 'with-separator' | 'no-title-space' | 'highlight-title' | string;\r\n\r\nexport interface IFormPanel extends IInputBase<null> {\r\n  children?: (InputBase<any> | InputLabel)[];\r\n  containerClass?: classAvailable[];\r\n  contentClass?: string;\r\n}\r\n\r\nexport class InputPanel extends InputBase<any> {\r\n  containerClass: classAvailable[];\r\n  contentClass: string;\r\n  constructor(options: IFormPanel) {\r\n    super(options);\r\n    this.controlType = 'panel';\r\n\r\n    this.containerClass = options.containerClass || [];\r\n    this.contentClass = options.contentClass || '';\r\n    this.children = options.children || [];\r\n  }\r\n}\r\n","import { Observable, of } from 'rxjs';\r\n\r\nimport { IInputBase, InputBase } from './base';\r\n\r\nexport interface IInputRadio<T> extends IInputBase<T> {\r\n  options?: Observable<{ id: T; name?: string; icon?: string }[]>;\r\n  useMaterialTheme?: boolean;\r\n}\r\nexport class InputRadio<T> extends InputBase<T> {\r\n  override controlType = 'radio';\r\n  useMaterialTheme: boolean;\r\n  options: Observable<{ id: T; name?: string; icon?: string }[]>;\r\n\r\n  constructor(options: IInputRadio<T> = {}) {\r\n    super(options);\r\n    this.options = options['options'] || of([]);\r\n    this.type = 'radioGroup';\r\n    this.useMaterialTheme = options.useMaterialTheme || false;\r\n  }\r\n}\r\n","import { IInputBase, InputBase } from './base';\r\n\r\nexport interface IInputTextarea<T> extends IInputBase<T> {}\r\n\r\nexport class InputTextarea extends InputBase<string> {\r\n  override controlType = 'textarea';\r\n\r\n  constructor(options: IInputTextarea<string> = {}) {\r\n    super(options);\r\n  }\r\n}\r\n","import { IInputBase, InputBase } from './base';\r\n\r\nexport type InputUploadValue = {\r\n  id: string;\r\n  url: string;\r\n  name?: string;\r\n};\r\n\r\nexport interface IInputUpload extends IInputBase<InputUploadValue[]> {\r\n  confirmButton?: boolean;\r\n}\r\n\r\nexport class InputUpload extends InputBase<InputUploadValue[]> {\r\n  confirmButton: boolean;\r\n\r\n  constructor(options: IInputUpload) {\r\n    super(options);\r\n    this.controlType = 'upload';\r\n    this.confirmButton = options.confirmButton ?? false;\r\n  }\r\n\r\n  public confirmValue(ids: InputUploadValue[]) {\r\n    this.formControl?.setValue(ids);\r\n  }\r\n}\r\n","import { InputBase } from './input/base';\r\nimport { InputCheckBox } from './input/checkbox';\r\nimport { InputColorPicker } from './input/colorPicker';\r\nimport { InputDropdown } from './input/dropdown';\r\nimport { IInputChildrenDynamic } from './input/dynamic';\r\nimport { InputLabel } from './input/label';\r\nimport { InputNumber } from './input/number';\r\nimport { InputPanel } from './input/panel';\r\nimport { InputRadio } from './input/radio';\r\nimport { InputTextarea } from './input/textarea';\r\nimport { InputTextBox } from './input/textbox';\r\nimport { InputUpload } from './input/upload';\r\n\r\nexport type FactoryInputType =\r\n  | 'InputCheckBox'\r\n  | 'InputRadio'\r\n  | 'InputColorPicker'\r\n  | 'InputDropdown'\r\n  | 'InputImages'\r\n  | 'InputLabel'\r\n  | 'InputNumber'\r\n  | 'InputPanel'\r\n  | 'InputSchema'\r\n  | 'InputTextarea'\r\n  | 'InputTextBox'\r\n  | 'InputWysiswyg'\r\n  | 'InputUpload';\r\nexport class InputFactory {\r\n  public static getInput(key: FactoryInputType, options: IInputChildrenDynamic): InputBase<any> {\r\n    if (options.templateChildren) {\r\n      options.children = options.templateChildren();\r\n    }\r\n\r\n    switch (key) {\r\n      case 'InputCheckBox':\r\n        return new InputCheckBox(options);\r\n      case 'InputRadio':\r\n        return new InputRadio(options);\r\n      case 'InputColorPicker':\r\n        return new InputColorPicker(options);\r\n      case 'InputDropdown':\r\n        return new InputDropdown(options);\r\n      // case 'InputImages':\r\n      // return new InputImages(options);\r\n      case 'InputLabel':\r\n        return new InputLabel(options);\r\n      case 'InputNumber':\r\n        return new InputNumber(options);\r\n      case 'InputPanel':\r\n        return new InputPanel(options);\r\n      // case 'InputSchema':\r\n      //   return new InputSchema(options);\r\n      case 'InputTextarea':\r\n        return new InputTextarea(options);\r\n      case 'InputTextBox':\r\n        return new InputTextBox(options);\r\n      case 'InputUpload':\r\n        return new InputUpload(options);\r\n      default:\r\n        return new InputTextBox(options);\r\n    }\r\n  }\r\n}\r\n","import { TemplateRef } from '@angular/core';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { IInputDropdown, InputDropdown } from './dropdown';\r\n\r\nexport type InputChoicesOption = {\r\n  id: string;\r\n  name: string;\r\n  disabled?: boolean;\r\n  data: any;\r\n};\r\n\r\nexport interface IInputChoices extends IInputDropdown<string> {\r\n  options?: Observable<InputChoicesOption[]>;\r\n  advancedSearch$?: (search?: string) => Observable<InputChoicesOption[]>;\r\n}\r\nexport class InputChoices extends InputDropdown<string> {\r\n  override controlType = 'choices';\r\n  declare options: Observable<InputChoicesOption[]>;\r\n\r\n  public advancedSearch$: ((search?: string) => Observable<InputChoicesOption[]>) | null;\r\n\r\n  constructor(options: IInputChoices = {}) {\r\n    super(options);\r\n\r\n    this.advancedSearch$ = options['advancedSearch$'] || null;\r\n  }\r\n}\r\n","import { IInputBase, InputBase } from './base';\r\n\r\nexport interface IInputDatePicker extends IInputBase<string | Partial<{ start: Date | null; end: Date | null }>> {\r\n  minDate?: Date | 'today';\r\n  maxDate?: Date | 'today';\r\n  rangeEnabled?: boolean;\r\n}\r\n\r\nexport class InputDatePicker extends InputBase<Date | Partial<{ start: Date | null; end: Date | null }>> {\r\n  minDate: Date | null;\r\n  maxDate: Date | null;\r\n  rangeEnabled: boolean;\r\n\r\n  constructor(options: IInputDatePicker = {}) {\r\n    super(options);\r\n    this.controlType = 'date-picker';\r\n\r\n    this.minDate = this.parseDate(options.minDate);\r\n    this.maxDate = this.parseDate(options.maxDate);\r\n    this.rangeEnabled = options.rangeEnabled ?? false;\r\n  }\r\n\r\n  public parseDate(date?: Date | 'today'): Date | null {\r\n    if (!date) {\r\n      return null;\r\n    }\r\n\r\n    if (date instanceof Date) {\r\n      return date;\r\n    }\r\n\r\n    switch (date) {\r\n      case 'today':\r\n        return new Date();\r\n      default:\r\n        return new Date(date);\r\n    }\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { FactoryInputType, InputFactory } from '../factory';\r\nimport { IInputBase, InputBase } from './base';\r\n\r\ninterface IInputTemplateDynamic {\r\n  type: FactoryInputType;\r\n  options: IInputChildrenDynamic;\r\n}\r\nexport interface IInputChildrenDynamic extends IInputBase<any> {\r\n  templateChildren?: () => InputBase<any>[];\r\n}\r\nexport interface IInputDynamic extends IInputBase<any> {\r\n  inputsGroup?: { [key: string]: InputBase<any>[] };\r\n  template?: IInputTemplateDynamic[];\r\n}\r\nexport class InputDynamic extends InputBase<{ [index: string]: any }> {\r\n  listChanged$ = new Subject<void>();\r\n\r\n  inputsGroup: { [key: string]: InputBase<any>[] };\r\n  template: IInputTemplateDynamic[];\r\n  firstRender: boolean = true;\r\n  composedKeyForGroup: boolean = true;\r\n\r\n  declare formControl?: FormGroup;\r\n\r\n  constructor(options: IInputDynamic = {}) {\r\n    super(options);\r\n    this.inputsGroup = options.inputsGroup || {};\r\n    this.template = options.template || [];\r\n\r\n    this.controlType = 'dynamic';\r\n  }\r\n\r\n  public add(key?: string) {\r\n    const templates: InputBase<any>[] = [];\r\n    const value = key && this.value ? this.value[key] : null;\r\n    for (const template of this.template) {\r\n      templates.push(\r\n        InputFactory.getInput(template.type, {\r\n          ...template.options,\r\n          ...{ value: value ? value[template.options.key ?? ''] : null },\r\n        })\r\n      );\r\n    }\r\n    this._addControl(templates, key ?? this._inputKey());\r\n    this.listChanged$.next();\r\n  }\r\n  public remove(id: string) {\r\n    if (this.inputsGroup[id]) {\r\n      this.formControl?.removeControl(this.key + '-' + id);\r\n      delete this.inputsGroup[id];\r\n    }\r\n    this.listChanged$.next();\r\n  }\r\n  public override createFormControl(group: FormGroup): void {\r\n    this.formControl = new FormGroup({});\r\n    const inputGroupKeys = Object.keys(this.inputsGroup);\r\n    inputGroupKeys.forEach(key => {\r\n      this._addControl(this.inputsGroup[key], key);\r\n    });\r\n    if (this.firstRender && this.template && inputGroupKeys.length === 0) {\r\n      this.add();\r\n    }\r\n    group.addControl(this.key, this.formControl);\r\n  }\r\n\r\n  private _addControl(inputs: InputBase<any>[], key: string): void {\r\n    const childGroup = new FormGroup({});\r\n    inputs.forEach(input => {\r\n      input.createFormControl(childGroup);\r\n    });\r\n    this.formControl?.addControl(this.composedKeyForGroup ? this.key + '-' + key : key, childGroup);\r\n    this.inputsGroup[key] = inputs;\r\n  }\r\n\r\n  private _inputKey(): string {\r\n    return '' + Math.floor(Math.random() * 10000);\r\n  }\r\n}\r\n","import { Validators } from '@angular/forms';\r\n\r\nimport { IInputTextBox, InputTextBox } from './textbox';\r\n\r\nexport class InputEmail extends InputTextBox {\r\n  constructor(options: IInputTextBox<string> = {}) {\r\n    super(options);\r\n    this.type = 'email';\r\n    this.validators.push(Validators.email);\r\n  }\r\n}\r\n","import { Validators } from '@angular/forms';\r\n\r\nimport { IInputTextBox, InputTextBox } from './textbox';\r\n\r\nexport class InputPassword extends InputTextBox {\r\n  constructor(options: IInputTextBox<string> = {}) {\r\n    super(options);\r\n    this.type = 'password';\r\n    this.validators.push(Validators.required);\r\n  }\r\n}\r\n","import { InputBase } from './base';\r\nimport { IInputTextBox } from './textbox';\r\n\r\nexport class InputPhone extends InputBase<string> {\r\n  override controlType = 'phone';\r\n  preferredCountries: string[];\r\n\r\n  constructor(options: IInputTextBox<string> = {}) {\r\n    super(options);\r\n    this.type = 'tel';\r\n    this.preferredCountries = ['be', 'fr'];\r\n  }\r\n}\r\n","import { IInputBase, InputBase } from './base';\r\n\r\nexport interface IInputSlider extends IInputBase<number> {\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport class InputSlider extends InputBase<number> {\r\n  public min: number;\r\n  public max: number;\r\n\r\n  override controlType = 'slider';\r\n\r\n  constructor(options: IInputSlider = {}) {\r\n    super(options);\r\n\r\n    this.min = options.min || 0;\r\n    this.max = options.max || 100;\r\n  }\r\n}\r\n","import { map } from 'rxjs/operators';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { IInputBase, InputBase } from './base';\r\n\r\nexport interface IFormSwitch extends IInputBase<null> {\r\n  matchtype: Observable<'textbox' | 'checkbox' | 'number' | 'datePicker'>;\r\n}\r\n\r\nexport class InputSwitch extends InputBase<any> {\r\n  contentClass!: string;\r\n  matchtype!: Observable<string>;\r\n\r\n  constructor(options: IFormSwitch) {\r\n    super(options);\r\n    this.controlType = 'switch';\r\n\r\n    this.matchtype = options.matchtype.pipe(map(type => (this.type = type))) || of('');\r\n  }\r\n}\r\n","import { IInputTextBox, InputTextBox } from './textbox';\r\n\r\nexport interface IInputTimePicker extends IInputTextBox<string> {}\r\n\r\nexport class InputTimePicker extends InputTextBox {\r\n  constructor(options: IInputTimePicker = {}) {\r\n    super(options);\r\n    this.type = 'time';\r\n    this.controlType = 'timePicker';\r\n  }\r\n}\r\n","import { IFormPanel, InputPanel } from './panel';\r\nimport { InputTextBox } from './textbox';\r\n\r\nexport enum EAddressValues {\r\n  street = 'street',\r\n  streetNumber = 'streetNumber',\r\n  locality = 'locality',\r\n  postalCode = 'postalCode',\r\n  country = 'country',\r\n  longitude = 'longitude',\r\n  latitude = 'latitude',\r\n}\r\n\r\nexport interface IAddressValue {\r\n  street: string;\r\n  streetNumber: number;\r\n  locality: string;\r\n  postalCode: number;\r\n  country: string;\r\n  longitude: number;\r\n  latitude: number;\r\n}\r\nexport interface IInputAddress extends IFormPanel {}\r\nexport class InputAddress extends InputPanel {\r\n  override controlType = 'address';\r\n\r\n  override set value(data: IAddressValue) {\r\n    this.children.find(x => x.key === EAddressValues.street)!.value = data.street;\r\n    this.children.find(x => x.key === EAddressValues.streetNumber)!.value = data.streetNumber;\r\n    this.children.find(x => x.key === EAddressValues.country)!.value = data.country;\r\n    this.children.find(x => x.key === EAddressValues.locality)!.value = data.locality;\r\n    this.children.find(x => x.key === EAddressValues.postalCode)!.value = data.postalCode;\r\n    this.children.find(x => x.key === EAddressValues.longitude)!.value = data.longitude;\r\n    this.children.find(x => x.key === EAddressValues.latitude)!.value = data.latitude;\r\n  }\r\n\r\n  constructor(options: IInputAddress = {}) {\r\n    super(options);\r\n    this.type = 'address';\r\n    this.children.push(\r\n      new InputTextBox({\r\n        key: EAddressValues.street,\r\n      }),\r\n      new InputTextBox({\r\n        key: EAddressValues.streetNumber,\r\n      }),\r\n      new InputTextBox({\r\n        key: EAddressValues.locality,\r\n      }),\r\n      new InputTextBox({\r\n        key: EAddressValues.country,\r\n      }),\r\n      new InputTextBox({\r\n        key: EAddressValues.postalCode,\r\n      }),\r\n      new InputTextBox({\r\n        key: EAddressValues.longitude,\r\n      }),\r\n      new InputTextBox({\r\n        key: EAddressValues.latitude,\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Observable, of } from 'rxjs';\r\n\r\nimport { IInputBase, InputBase } from '../base';\r\n\r\nexport interface IInputButton extends IInputBase<any> {\r\n  callback?: Function;\r\n  disabled$?: Observable<boolean>;\r\n  style?: 'primary' | 'secondary' | 'danger';\r\n}\r\nexport class InputButton extends InputBase<any> {\r\n  override controlType = 'button';\r\n  public callback: Function = () => {};\r\n  public disabled$?: Observable<boolean> = of(false);\r\n  public style: 'primary' | 'secondary' | 'danger';\r\n\r\n  constructor(options: IInputButton = {}) {\r\n    super(options);\r\n\r\n    if (options.callback) {\r\n      this.callback = options.callback;\r\n    }\r\n    if (options.disabled$) {\r\n      this.disabled$ = options.disabled$;\r\n    }\r\n    this.style = options.style ?? 'primary';\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of form-model\r\n */\r\n\r\nexport * from './lib/validators/slug.validator';\r\n\r\nexport * from './lib/models/public-api';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}